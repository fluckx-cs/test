name: acceptance pipeline

on:
  push:
    branches:
      - feature/*

jobs:
  check_for_changes:
    outputs:
      skeleton_acc_changed: ${{ steps.check_changes.outputs.skeleton_acceptance }}"
      app1_acc_changed: ${{ steps.check_changes.outputs.app1_acceptance || steps.check_changes.outputs.skeleton_acceptance }}"
      app2_acc_changed: ${{ steps.check_changes.outputs.app2_acceptance || steps.check_changes.outputs.skeleton_acceptance }}"
      skeleton_prd_changed: ${{ steps.check_changes.outputs.skeleton_production }}"
      app1_prd_changed: ${{ steps.check_changes.outputs.app1_production || steps.check_changes.outputs.skeleton_production }}"
      app2_prd_changed: ${{ steps.check_changes.outputs.app2_production || steps.check_changes.outputs.skeleton_production }}"
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: mark as safe
        run: |
          git config --global --add safe.directory $(pwd)

      - name: check if skeleton has changes
        uses: dorny/paths-filter@v2
        id: check_changes
        with:
          filters: |
            skeleton_acceptance:
              - 'stacks/skeleton/**'
              - '!stacks/skeleton/**/*tfvars'
              - 'stacks/skeleton/**/acceptance.tfvars'
            skeleton_production:
              - 'stacks/skeleton/**'
              - '!stacks/skeleton/**/*tfvars'
              - 'stacks/skeleton/**/production.tfvars'
            app1_acceptance:
              - 'stacks/infra/app1/**'
              - '!stacks/infra/app1/*tfvars'
              - 'stacks/infra/app1/acceptance.tfvars'
            app1_production:
              - 'stacks/infra/app1/**'
              - '!stacks/infra/app1/*tfvars'
              - 'stacks/infra/app1/production.tfvars'
            app2_acceptance:
              - 'stacks/infra/app2/**'
              - '!stacks/infra/app2/*tfvars'
              - 'stacks/infra/app2/acceptance.tfvars'
            app2_production:
              - 'stacks/infra/app2/**'
              - '!stacks/infra/app2/*tfvars'
              - 'stacks/infra/app2/production.tfvars'

      - name: output checks
        run: |
          echo "run skeleton acc: ${{ steps.check_changes.outputs.skeleton_acceptance }}"
          echo "run app1 acc:     ${{ steps.check_changes.outputs.app1_acceptance || steps.check_changes.outputs.skeleton_acceptance }}"
          echo "run app2 acc:     ${{ steps.check_changes.outputs.app2_acceptance || steps.check_changes.outputs.skeleton_acceptance }}"
          echo "run skeleton prd: ${{ steps.check_changes.outputs.skeleton_production }}"
          echo "run app1 prd:     ${{ steps.check_changes.outputs.app1_production || steps.check_changes.outputs.skeleton_production }}"
          echo "run app2 prd:     ${{ steps.check_changes.outputs.app2_production || steps.check_changes.outputs.skeleton_production }}"
        

  plan_terraform_skeleton_acceptance:
    runs-on: ubuntu-latest
    needs: check_for_changes
    if: ${{ always() && needs.check_for_changes.outputs.skeleton_acc_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          cd stacks/skeleton/base-networking
          terraform init
          terraform plan -out=base-networking.tfplan

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-skeleton
          path: |
            stacks/skeleton/**/*tfplan

  plan_terraform_app1_acceptance:
    runs-on: ubuntu-latest
    if: ${{ always() && needs.check_for_changes.outputs.app1_acc_changed == 'true' }}
    needs:
      - check_for_changes
      - plan_terraform_skeleton_acceptance
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          cd stacks/infra/app1
          echo "Running plan in app1"
          terraform init
          terraform plan -out=app1.tfplan

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app1
          path: |
            stacks/app1/*tfplan

  plan_terraform_app2_acceptance:
    runs-on: ubuntu-latest
    if: ${{ always() && needs.check_for_changes.outputs.app2_acc_changed == 'true' }}
    needs:
      - check_for_changes
      - plan_terraform_skeleton_acceptance
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          cd stacks/infra/app2
          echo "Running plan in app2"
          terraform init
          terraform plan -out=app2.tfplan

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app2
          path: |
            stacks/app2/*tfplan
