name: production pipeline

on:
  push:
    branches:
      - main

jobs:
  check_for_changes:
    outputs:
      skeleton_acc_changed: ${{ steps.check_changes.outputs.skeleton_acceptance }}
      app1_acc_changed:     ${{ steps.check_changes.outputs.app1_acceptance }}
      app2_acc_changed:     ${{ steps.check_changes.outputs.app2_acceptance }}
      skeleton_prd_changed: ${{ steps.check_changes.outputs.skeleton_production }}
      app1_prd_changed:     ${{ steps.check_changes.outputs.app1_production }}
      app2_prd_changed:     ${{ steps.check_changes.outputs.app2_production }}
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: mark as safe
        run: |
          git config --global --add safe.directory $(pwd)

      - name: check for changes in stacks
        uses: dorny/paths-filter@v2
        id: check_changes
        with:
          filters: |
            skeleton_acceptance: &skeleton_acceptance
              - './stacks/skeleton/**/*tf'
              - './stacks/skeleton/**/acceptance.tfvars'
            skeleton_production: &skeleton_production
              - './stacks/skeleton/**/*tf'
              - './stacks/skeleton/**/production.tfvars'
            app1_acceptance:
              - *skeleton_acceptance
              - './stacks/infra/app1/*tf'
              - './stacks/infra/app1/acceptance.tfvars'
            app1_production:
              - *skeleton_acceptance
              - './stacks/infra/app1/*tf'
              - './stacks/infra/app1/production.tfvars'
            app2_acceptance:
              - *skeleton_acceptance
              - './stacks/infra/app2/*tf'
              - './stacks/infra/app2/acceptance.tfvars'
            app2_production:
              - *skeleton_production
              - './stacks/infra/app2/*tf'
              - './stacks/infra/app2/production.tfvars'

      - name: output checks
        run: |
          echo "run skeleton acc: ${{ steps.check_changes.outputs.skeleton_acceptance }}"
          echo "run app1 acc:     ${{ steps.check_changes.outputs.app1_acceptance }}"
          echo "run app2 acc:     ${{ steps.check_changes.outputs.app2_acceptance }}"
          echo "run skeleton prd: ${{ steps.check_changes.outputs.skeleton_production }}"
          echo "run app1 prd:     ${{ steps.check_changes.outputs.app1_production }}"
          echo "run app2 prd:     ${{ steps.check_changes.outputs.app2_production }}"
  

  plan_terraform_skeleton_acceptance:
    runs-on: ubuntu-latest
    needs: check_for_changes
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.skeleton_acc_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          terraform -chdir=stacks/skeleton/base-networking init
          terraform -chdir=stacks/skeleton/base-networking plan -out=base-networking.tfplan -var-file=acceptance.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-skeleton-acceptance
          path: |
            **/*tfplan

  apply_terraform_skeleton_acceptance:
    runs-on: ubuntu-latest
    needs:
      - check_for_changes
      - plan_terraform_skeleton_acceptance
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.skeleton_acc_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-skeleton-acceptance

      - name: apply skeleton
        run: |
          terraform -chdir=stacks/skeleton/base-networking init
          terraform -chdir=stacks/skeleton/base-networking apply base-networking.tfplan

  plan_terraform_skeleton_production:
    runs-on: ubuntu-latest
    needs: check_for_changes
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.skeleton_prd_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          terraform -chdir=stacks/skeleton/base-networking init
          terraform -chdir=stacks/skeleton/base-networking plan -out=base-networking.tfplan -var-file=production.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-skeleton-production
          path: |
            **/*tfplan

  apply_terraform_skeleton_production:
    runs-on: ubuntu-latest
    needs:
    - check_for_changes
    - plan_terraform_skeleton_production
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.skeleton_prd_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-skeleton-production

      - name: apply skeleton
        run: |
          terraform -chdir=stacks/skeleton/base-networking init
          terraform -chdir=stacks/skeleton/base-networking apply base-networking.tfplan


  plan_terraform_app1_acceptance:
    runs-on: ubuntu-latest
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app1_acc_changed == 'true' }}
    needs:
      - check_for_changes
      - apply_terraform_skeleton_acceptance
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          echo "Running plan in app1"
          terraform -chdir=stacks/infra/app1 init
          terraform -chdir=stacks/infra/app1 plan -out=app1-acceptance.tfplan -var-file=acceptance.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app1-acceptance
          path: |
            stacks/infra/app1/*tfplan

  apply_terraform_app1_acceptance:
    runs-on: ubuntu-latest
    needs:
    - check_for_changes
    - plan_terraform_app1_acceptance
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app1_acc_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-app1-acceptance

      - name: move artifact back
        run: |
          cp app1-acceptance.tfplan stacks/infra/app1/app1-acceptance.tfplan

      - name: apply app1
        run: |
          terraform -chdir=stacks/infra/app1 init
          terraform -chdir=stacks/infra/app1 apply app1-acceptance.tfplan


  plan_terraform_app2_acceptance:
    runs-on: ubuntu-latest
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app2_acc_changed == 'true' }}
    needs:
      - check_for_changes
      - apply_terraform_skeleton_acceptance
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          echo "Running plan in app2"
          terraform -chdir=stacks/infra/app2 init
          terraform -chdir=stacks/infra/app2 plan -out=app2-acceptance.tfplan -var-file=acceptance.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app2-acceptance
          path: |
            stacks/infra/app2/app2-acceptance.tfplan

  apply_terraform_app2_acceptance:
    runs-on: ubuntu-latest
    needs:
      - check_for_changes
      - plan_terraform_app2_acceptance
    environment: acceptance
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app2_acc_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-app2-acceptance

      - name: move artifact back
        run: |
          cp app2-acceptance.tfplan stacks/infra/app2/app2-acceptance.tfplan

      - name: apply app2
        run: |
          terraform -chdir=stacks/infra/app2 init
          terraform -chdir=stacks/infra/app2 apply app2-acceptance.tfplan

  plan_terraform_app1_production:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app1_prd_changed == 'true' }}
    needs:
      - check_for_changes
      - apply_terraform_skeleton_production
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          echo "Running plan in app1"
          terraform -chdir=stacks/infra/app1 init
          terraform -chdir=stacks/infra/app1 plan -out=app1-production.tfplan -var-file=production.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app1-production
          path: |
            stacks/infra/app1/*tfplan

  apply_terraform_app1_production:
    runs-on: ubuntu-latest
    needs:
    - check_for_changes
    - plan_terraform_app1_production
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app1_prd_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-app1-production

      - name: move artifact back
        run: |
          cp app1-production.tfplan stacks/infra/app1/app1-production.tfplan

      - name: apply app1
        run: |
          terraform -chdir=stacks/infra/app1 init
          terraform -chdir=stacks/infra/app1 apply app1-production.tfplan

  plan_terraform_app2_production:
    runs-on: ubuntu-latest
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app2_prd_changed == 'true' }}
    needs:
      - check_for_changes
      - apply_terraform_skeleton_production
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: plan skeleton
        run: |
          echo "Running plan in app2"
          terraform -chdir=stacks/infra/app2 init
          terraform -chdir=stacks/infra/app2 plan -out=app2-production.tfplan -var-file=production.tfvars

      - name: Save Terraform plan as artifact file
        uses: actions/upload-artifact@v3
        with:
          name: plan-files-app2-production
          path: |
            stacks/infra/app2/app2-production.tfplan


  apply_terraform_app2_production:
    runs-on: ubuntu-latest
    needs:
    - check_for_changes
    - plan_terraform_app2_production
    environment: production
    if: ${{ !cancelled() && !failure() && needs.check_for_changes.outputs.app2_prd_changed == 'true' }}
    container:
      image: hashicorp/terraform:1.6
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: plan-files-app2-production
          rename: stacks/app2/app2-production.tfplan

      - name: move artifact back
        run: |
          cp app2-production.tfplan stacks/infra/app2/app2-production.tfplan

      - name: apply app2
        run: |
          terraform -chdir=stacks/infra/app2 init
          terraform -chdir=stacks/infra/app2 apply app2-production.tfplan
